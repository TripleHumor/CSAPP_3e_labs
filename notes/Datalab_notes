完整handout下载在http://csapp.cs.cmu.edu/3e/labs.html，本Repo中只有.c文件
具体题目要求请看handout中的Readme文件

1.int bitand(int x,int y)
只用~和|来表示&，基本操作，搭积木

2.int getbyte(int x,int n)
使用&以及移位操作，其中移位的用法有两种(1)调整位置，（2）计算乘法

3.int logicialShift(int x,int n)
>>默认算术右移，利用算数右移来实现逻辑右移
思路是算术右移后，将前n位取0，通过移位和&，~来实现

4.int bitcount(int x)
不愧是4分题，初见被它卡住，参考了网上的思路以后才破，所以要好好总结,参考了https://blog.csdn.net/qq_40889820/article/details/88831962
难点在于它限制了操作符数量，因而32位逐一看过去不可取，关键的思想是递归还有二分的思想
可以先从简单的情况开始考虑，
(1)1位的情况很简单，1是1个，0是0个
(2)2位的情况，2位可以拆成两个1位，让两个位相加就可以得到有几个1，算式为(x&01)+((x>>1)&01)，其中x是个两位的数，不妨代入试着算一下
(3)4位的情况，4位可以拆成两个2位，将两个2位算出后，再计算它们的和，算式为
  x=(x&0101)+((x>>1)&0101)
  x=(x&0011)+((x>>2)&0011)
  (以上常数为二进制表示)
(4)8位，16位，32位，64位的情况，思路同上
总结下来这种解决问题的思路是挺值得学习的

5.int bang(int x)
不使用！来实现！，关键点在于发现补码0和其它非0补码的区别之处，而解法不止一种
主要利用了只有补码0和补码0x80000000的相反数是它们本身的特性，而要区分0和0x80000000，又只有0再代入x|-x时的值为0
此外也可以通过^等方法来计算，不过比较下来|更优雅，只要一个条件一步到位
比如将x与-x进行^(异或)，只有0和0x80000000会符号位得到结果0，其它为1，而要区分0和0x80000000可以利用0的符号位为正来完成
算式可以写成(（~(x^(~x+1))&(~x)）>>31)&1

6.int tmin(void)
送分题，知道补码的最小值想办法表示出0x80000000即可

7.int fitsBits(int x,int n)
主要利用了算数右移的特性，会根据符号位补0和1，能理解到这和符号扩展有关就好办了
观察x左移再右移(32-n)位后数值是否有变化即可(用^),没有变化就表明可以用n位表示
（然后不知道为什么我测试没通过，应该是测试出问题了hh）

8.int divpwr2(int x,int n)
参考教科书上的解释，因为要得到的结果需要向零舍入，而截断是向下舍入，对于正数这没问题，对于负数需要注意得让它变成向上舍入，通过加上一个偏置值即可

9.int negate(int x)
补码取相反数，用了好多次了，送分题

10.int isPositive(int x)
判断是否是正数，排除0和符号位为1的负数即可

11.int isLessOrEqual(int x,int y)
计算x-y，注意要考虑不溢出，正溢出以及负溢出的情况
需要仔细列出，我的列法如下
不溢出，x-y<0(符号位),x-y==0(利用！(x-y)判断)
正溢出，x-y<0,x为正，y为负，不符合，需要排除
负溢出，x-y>0,x为负，y为正，符合，需要考虑
详细算式见代码，bits.c文件中

12.int ilog2(int x)
找出x的最高位即可，难点在于只利用所给的运算符，操作符量倒是管够
逐位比较是不可能的，经过第4题的洗礼，就不难想到利用二分的思想来进行计算，卖个关子，具体实现见代码

13.unsigned float_neg(unsigned uf)
浮点数取相反数，注意细节即可，这里只要留神NaN(阶码全1，小数部分非0)，其它情况只要改变符号位

14.unsigned float_i2f(int x)
补码表示转换成单精度浮点表示，注意细节，具体情况一一列举
具体有：非规格化数，NaN，无穷无需考虑，要考虑的有0，规格化数，特别要注意的是小数部分当出现舍入时的情况是向偶数舍入，0x80000000也要注意，以及规格化数隐含的1，
以及浮点数的负数和正数只有符号区别，与补码不同
符号位容易计算，阶码若是算出了数的最高有效位就可以轻易计算，小数部分通过移位和舍入两者协同计算

15.unsigned float_twice(unsigned uf)
只要考虑周全即可，非规格化数，规格化数，无穷大，NaN
非规格化数符号位不变，阶码和小数部分一起左移1位
规格化数符号，小数位不变，阶码数+1，要注意的是溢出的情况需要设为无穷大
无穷大以及NaN的情况返回uf即可
